services:
  transaction_processor:
    image: golang:1.24-alpine
    volumes:
      - ./:/app
    depends_on:
      db_transactions:
        condition: service_healthy
    working_dir: /app
    environment:
      DATABASE_URL: postgres://postgres:postgres@db_transactions:5432/transactions_db
      FAULTY: 20
    command: ["go", "run", "transaction_processor/main.go"]
    ports:
      - "8000:8000"

  outbox_processor:
    image: golang:1.24-alpine
    volumes:
      - ./:/app
    depends_on:
      transaction_processor:
        condition: service_started
      db_transactions:
        condition: service_healthy
      kafka:
        condition: service_started
    working_dir: /app
    environment:
      DATABASE_URL: postgres://postgres:postgres@db_transactions:5432/transactions_db
      FAULTY: 20
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: transactions
    init: true
    tty: true
    command: ["go", "run", "outbox_processor/main.go"]

  inbox_processor:
    image: golang:1.24-alpine
    volumes:
      - ./:/app
    depends_on:
      db_balance:
        condition: service_healthy
      kafka:
        condition: service_started
    working_dir: /app
    environment:
      DATABASE_URL: postgres://postgres:postgres@db_balance:5432/balance_db
      FAULTY: 20
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: transactions
      KAFKA_CONSUMER_GROUP: balance-consumer-group
    init: true
    tty: true
    command: ["go", "run", "inbox_processor/main.go"]

  db_transactions:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transactions_db
    volumes:
      - transactions_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_balance:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: balance_db
    volumes:
      - balance_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: apache/kafka:4.0.0
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      # KRaft settings
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      # Listeners
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    restart: always
    environment:
      LOGGING_LEVEL_ROOT: error
      LOGGING_LEVEL_COM_PROVECTUS: error
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

volumes:
  transactions_data: {}
  balance_data: {}
  kafka_data: {}